# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kXDoARgiiknQ5Z-iH2kO54DhGat17dkt
"""

import pandas as pd
import numpy as np
from sklearn.feature_selection import chi2

def binary_features(data:pd.DataFrame):
    '''
    Recebe um df.Pandas e determina as colunas binárias (0 e 1).
    
    Parâmetros:
    -----------
    data : DF do Pandas, tipo : pd.DataFrame.
    
    Retorno:
    --------
    features : colunas binárias do df, tipo : list
    '''
    features = []
    
    for feature in data.columns:
        if len(data[feature].unique()) == 2:
            if max(data[feature])==1 and min(data[feature])==0:
                features.append(feature)      
    return features

def teste_chi2(X:pd.DataFrame, y:pd.Series):
    '''
    Recebe um df.pandas com as variáveis preditoras e uma series do 
    pandas da variável de reposta, então calcula o chi-quadrado de modo a 
    avaliar a relação entre as variáveis qualitativas.
    
    Parâmetros:
    -----------
    X : dataframe com as variáveis preditoras,tipo : pd.DataFrame,
        OBS: pode conter apenas uma coluna mas precisa ser do tipo pd.DataFrame
    y : Series do pandas da variável de resposta, tipo : pd.Series
    
    Retorno:
    -------
    p_values : dicionário contendo os p valores de cada coluna analisada, 
    tipo : dict
    '''
    p_values = {}
    chi2_results = chi2(X, y)
    for i,col in enumerate(X):
        p_values[col] = chi2_results[1][i]
    return p_values

def teste_high_corr(data:pd.DataFrame, threshold:float=0.95):
    '''
    Recebe um df.pandas e calcula a matriz de correlação com apenas o triângulo
    superior. Também verifica quais colunas apressentam uma correlação acima
    do limite passado, eliminando uma das duas.
    
    Parâmetros:
    -----------
    data : DataFrame do pandas com as variáveis a serem analisadas;
    threshold : valor limite da correlação entre duas variáveis.
                tipo : str, padrão : 0.95
    Retorno:
    --------
    cols_drop : colunas a serem eliminadas com base nas correlações, tipo : list
    
    '''
    matrix_corr = data.corr().abs()
    matrix_corr_upper = matrix_corr.where(np.triu(np.ones(matrix_corr.shape), k=1).astype(np.bool))
    cols_drop = [col for col in matrix_corr_upper.columns if any(matrix_corr_upper[col] >= threshold)]
    return cols_drop